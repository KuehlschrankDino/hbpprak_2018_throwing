{"data":{"TF":[{"id":0,"name":"simple_move_robot","code":"import hbp_nrp_excontrol.nrp_states as states\nfrom smach import StateMachine\nfrom smach.state import State\nfrom gazebo_msgs.srv import ApplyBodyWrench, GetModelState, DeleteModel, SpawnEntity, SpawnEntityRequest\nfrom geometry_msgs.msg import Wrench, Vector3, Point\nfrom std_msgs.msg import Float32, String, Int32\nimport rospy\nfrom rospy import ServiceProxy, wait_for_service\nfrom hbp_nrp_excontrol.logs import clientLogger\ncylinder_height_init = 1.12015\ndef callback_height (data): \n    cylinder_height.value = data.data\ndef callback (data):\n    if (data.data == \"init_pos\"):\n        sebbel_state = 4\n        last_action_time = t\n        go_to_init.value = 1\n    else :\n        go_to_init.value = 0\ndef evaluate_height(): \n    state_proxy = ServiceProxy('/gazebo/get_model_state',\n                                     GetModelState, persistent=True)\n    try:\n        current_cylinder_state = state_proxy(\"cylinder\", \"world\")\n    except rospy.ServiceException as exc:\n        clientLogger.info(str(exc))\n        return 1\n    clientLogger.info(current_cylinder_state.pose.position.z)\n    if ((current_cylinder_state.pose.position.z - cylinder_height_init)>0.02):\n        return 0\n    else: \n        return 1\ndef evaluate_state(sebbel_state=0, last_action_time=0, act_time=0):\n    if (sebbel_state == 0): \n        if (act_time - last_action_time) > 2: \n            if(go_to_init.value == 0) :\n                sebbel_state = 1\n            else:\n                sebbel_state = 4 \n            last_action_time = t\n            return sebbel_state, last_action_time\n    if (sebbel_state == 1): \n        if (act_time -last_action_time) > 3: \n            if(go_to_init.value == 0) :\n                sebbel_state = 2\n            else:\n                sebbel_state = 4 \n            sebbel_state = 2\n            last_action_time = act_time\n            return sebbel_state, last_action_time\n    if (sebbel_state == 2): \n        if (act_time - last_action_time) > 0.7: \n            if(go_to_init.value == 0) :\n                sebbel_state = 99\n            else:\n                sebbel_state = 4 \n            last_action_time = act_time \n            return sebbel_state, last_action_time\n    if (sebbel_state == 99):          \n        if (act_time - last_action_time) > 1.5: \n            pub_reset = rospy.Publisher(\"/start_sim_new\", Int32, queue_size=1)     \n            pub_reset.publish(evaluate_height())\n            if(go_to_init.value == 0) :\n                sebbel_state = 3\n            else:\n                sebbel_state = 0 \n            last_action_time = act_time \n            return sebbel_state, last_action_time\n    if (sebbel_state == 3): \n        if (act_time -last_action_time) > 2: \n            clientLogger.info(\"state3\")\n            if(go_to_init.value == 0) :\n                sebbel_state = 4\n            else:\n                sebbel_state = 0 \n            last_action_time = act_time\n            return sebbel_state, last_action_time\n    if (sebbel_state == 4): \n        if (act_time - last_action_time) > 1: \n            reset_pub = rospy.Publisher(\"/sim_finished\", Int32, queue_size=1)\n            reset_pub.publish(1)\n            clientLogger.info(\"ENDE BANANE\")\n            rospy.Subscriber(\"/state\", String, callback, queue_size=1)\n            sebbel_state = 0\n            last_action_time = act_time \n    return sebbel_state, last_action_time\ndef grasp(strength):\n    for topic in [\n            hand_index_proximal,\n            hand_index_distal,\n            hand_middle_proximal,\n            hand_middle_distal,\n            hand_ring_proximal,\n            hand_ring_distal,\n            hand_pinky_proximal,\n            hand_pinky_distal,\n            hand_thumb_flexion,\n            hand_thumb_distal\n    ]:\n        topic.send_message(std_msgs.msg.Float64(strength))\nsebbel_state.value, last_action_time.value = evaluate_state(sebbel_state.value, last_action_time.value, t)\nif (sebbel_state.value == 0): \n    #approach\n    arm_1.send_message(std_msgs.msg.Float64(-3.705))\n    arm_2.send_message(std_msgs.msg.Float64(1.07))\n    arm_3.send_message(std_msgs.msg.Float64(-1.0))\n    arm_4.send_message(std_msgs.msg.Float64(3.1))\n    arm_5.send_message(std_msgs.msg.Float64(-0.99))\n    arm_6.send_message(std_msgs.msg.Float64(0.2))\n    grasp(0)\nelif (sebbel_state.value == 1): \n    #grasp \n    grasp(5)\n    arm_1.send_message(std_msgs.msg.Float64(-3.71))\nelif (sebbel_state.value == 2): \n    #turn\n    arm_2.send_message(std_msgs.msg.Float64(1.1))\n    arm_6.send_message(std_msgs.msg.Float64(-2))\nelif (sebbel_state.value == 99): \n    arm_2.send_message(std_msgs.msg.Float64(0.95))        \nelif(sebbel_state.value == 3):\n    arm_2.send_message(std_msgs.msg.Float64(-1.0 + output_1.rate / 50.0))\n    arm_3.send_message(std_msgs.msg.Float64(-1.0 + output_2.rate / 50.0))\n    grasp(-1.0 + output_2.rate / 50.0)\nelif (sebbel_state.value == 4): \n    #reinitiate\n    grasp(0)\n    arm_1.send_message(std_msgs.msg.Float64(-1.705))\n    arm_2.send_message(std_msgs.msg.Float64(1.075))\n    arm_3.send_message(std_msgs.msg.Float64(-1.0))\n    arm_4.send_message(std_msgs.msg.Float64(3.1))\n    arm_5.send_message(std_msgs.msg.Float64(-0.99))\n    arm_6.send_message(std_msgs.msg.Float64(0.2))\npub = rospy.Publisher('/bebbel_state', Int32, queue_size=1)\npub.publish(sebbel_state.value)\npub2 = rospy.Subscriber('/cylinder_height', Float32, callback_height)","dirty":false,"local":false,"error":{},"oldName":"simple_move_robot","rawCode":"# Imported Python Transfer Function\n@nrp.MapVariable(\"go_to_init\", initial_value=0)\n@nrp.MapVariable(\"cylinder_height\", initial_value=1.12015)\n@nrp.MapVariable(\"sebbel_time\", initial_value=0)\n@nrp.MapVariable(\"sebbel_state\", initial_value=0)\n@nrp.MapVariable(\"last_action_time\", initial_value=0)\n@nrp.MapSpikeSink(\"output_2\", nrp.brain.actors[2], nrp.population_rate)\n@nrp.MapSpikeSink(\"output_1\", nrp.brain.actors[1], nrp.population_rate)\n@nrp.MapSpikeSink(\"output_0\", nrp.brain.actors[0], nrp.population_rate)\n@nrp.MapRobotPublisher(\"arm_6\", Topic(\"/robot/arm_6_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"arm_5\", Topic(\"/robot/arm_5_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"arm_4\", Topic(\"/robot/arm_4_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"arm_3\", Topic(\"/robot/arm_3_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"arm_2\", Topic(\"/robot/arm_2_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"arm_1\", Topic(\"/robot/arm_1_joint/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_thumb_distal\", Topic(\"/robot/hand_j3/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_thumb_flexion\", Topic(\"/robot/hand_j4/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_pinky_distal\", Topic(\"/robot/hand_j13/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_pinky_proximal\", Topic(\"/robot/hand_Pinky/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_ring_distal\", Topic(\"/robot/hand_j12/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_ring_proximal\", Topic(\"/robot/hand_Ring_Finger/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_middle_distal\", Topic(\"/robot/hand_Middle_Finger_Distal/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_middle_proximal\", Topic(\"/robot/hand_Middle_Finger_Proximal/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_index_distal\", Topic(\"/robot/hand_Index_Finger_Distal/cmd_pos\", std_msgs.msg.Float64))\n@nrp.MapRobotPublisher(\"hand_index_proximal\", Topic(\"/robot/hand_Index_Finger_Proximal/cmd_pos\", std_msgs.msg.Float64))\n@nrp.Neuron2Robot()\ndef simple_move_robot(t, output_1, output_0, output_2, hand_index_proximal, hand_index_distal, hand_middle_proximal, hand_middle_distal, hand_ring_proximal, hand_ring_distal, hand_pinky_proximal, hand_pinky_distal, hand_thumb_flexion, hand_thumb_distal, arm_1, arm_2, arm_3, arm_4, arm_5, arm_6, sebbel_time, sebbel_state, last_action_time, cylinder_height, go_to_init):\n    import hbp_nrp_excontrol.nrp_states as states\n    from smach import StateMachine\n    from smach.state import State\n    from gazebo_msgs.srv import ApplyBodyWrench, GetModelState, DeleteModel, SpawnEntity, SpawnEntityRequest\n    from geometry_msgs.msg import Wrench, Vector3, Point\n    from std_msgs.msg import Float32, String, Int32\n    import rospy\n    from rospy import ServiceProxy, wait_for_service\n    from hbp_nrp_excontrol.logs import clientLogger\n    cylinder_height_init = 1.12015\n    def callback_height (data): \n        cylinder_height.value = data.data\n    def callback (data):\n        if (data.data == \"init_pos\"):\n            sebbel_state = 4\n            last_action_time = t\n            go_to_init.value = 1\n        else :\n            go_to_init.value = 0\n    def evaluate_height(): \n        state_proxy = ServiceProxy('/gazebo/get_model_state',\n                                         GetModelState, persistent=True)\n        try:\n            current_cylinder_state = state_proxy(\"cylinder\", \"world\")\n        except rospy.ServiceException as exc:\n            clientLogger.info(str(exc))\n            return 1\n        clientLogger.info(current_cylinder_state.pose.position.z)\n        if ((current_cylinder_state.pose.position.z - cylinder_height_init)>0.02):\n            return 0\n        else: \n            return 1\n    def evaluate_state(sebbel_state=0, last_action_time=0, act_time=0):\n        if (sebbel_state == 0): \n            if (act_time - last_action_time) > 2: \n                if(go_to_init.value == 0) :\n                    sebbel_state = 1\n                else:\n                    sebbel_state = 4 \n                last_action_time = t\n                return sebbel_state, last_action_time\n        if (sebbel_state == 1): \n            if (act_time -last_action_time) > 3: \n                if(go_to_init.value == 0) :\n                    sebbel_state = 2\n                else:\n                    sebbel_state = 4 \n                sebbel_state = 2\n                last_action_time = act_time\n                return sebbel_state, last_action_time\n        if (sebbel_state == 2): \n            if (act_time - last_action_time) > 0.7: \n                if(go_to_init.value == 0) :\n                    sebbel_state = 99\n                else:\n                    sebbel_state = 4 \n                last_action_time = act_time \n                return sebbel_state, last_action_time\n        if (sebbel_state == 99):          \n            if (act_time - last_action_time) > 1.5: \n                pub_reset = rospy.Publisher(\"/start_sim_new\", Int32, queue_size=1)     \n                pub_reset.publish(evaluate_height())\n                if(go_to_init.value == 0) :\n                    sebbel_state = 3\n                else:\n                    sebbel_state = 0 \n                last_action_time = act_time \n                return sebbel_state, last_action_time\n        if (sebbel_state == 3): \n            if (act_time -last_action_time) > 2: \n                clientLogger.info(\"state3\")\n                if(go_to_init.value == 0) :\n                    sebbel_state = 4\n                else:\n                    sebbel_state = 0 \n                last_action_time = act_time\n                return sebbel_state, last_action_time\n        if (sebbel_state == 4): \n            if (act_time - last_action_time) > 1: \n                reset_pub = rospy.Publisher(\"/sim_finished\", Int32, queue_size=1)\n                reset_pub.publish(1)\n                clientLogger.info(\"ENDE BANANE\")\n                rospy.Subscriber(\"/state\", String, callback, queue_size=1)\n                sebbel_state = 0\n                last_action_time = act_time \n        return sebbel_state, last_action_time\n    def grasp(strength):\n        for topic in [\n                hand_index_proximal,\n                hand_index_distal,\n                hand_middle_proximal,\n                hand_middle_distal,\n                hand_ring_proximal,\n                hand_ring_distal,\n                hand_pinky_proximal,\n                hand_pinky_distal,\n                hand_thumb_flexion,\n                hand_thumb_distal\n        ]:\n            topic.send_message(std_msgs.msg.Float64(strength))\n    sebbel_state.value, last_action_time.value = evaluate_state(sebbel_state.value, last_action_time.value, t)\n    if (sebbel_state.value == 0): \n        #approach\n        arm_1.send_message(std_msgs.msg.Float64(-3.705))\n        arm_2.send_message(std_msgs.msg.Float64(1.07))\n        arm_3.send_message(std_msgs.msg.Float64(-1.0))\n        arm_4.send_message(std_msgs.msg.Float64(3.1))\n        arm_5.send_message(std_msgs.msg.Float64(-0.99))\n        arm_6.send_message(std_msgs.msg.Float64(0.2))\n        grasp(0)\n    elif (sebbel_state.value == 1): \n        #grasp \n        grasp(5)\n        arm_1.send_message(std_msgs.msg.Float64(-3.71))\n    elif (sebbel_state.value == 2): \n        #turn\n        arm_2.send_message(std_msgs.msg.Float64(1.1))\n        arm_6.send_message(std_msgs.msg.Float64(-2))\n    elif (sebbel_state.value == 99): \n        arm_2.send_message(std_msgs.msg.Float64(0.95))        \n    elif(sebbel_state.value == 3):\n        arm_2.send_message(std_msgs.msg.Float64(-1.0 + output_1.rate / 50.0))\n        arm_3.send_message(std_msgs.msg.Float64(-1.0 + output_2.rate / 50.0))\n        grasp(-1.0 + output_2.rate / 50.0)\n    elif (sebbel_state.value == 4): \n        #reinitiate\n        grasp(0)\n        arm_1.send_message(std_msgs.msg.Float64(-1.705))\n        arm_2.send_message(std_msgs.msg.Float64(1.075))\n        arm_3.send_message(std_msgs.msg.Float64(-1.0))\n        arm_4.send_message(std_msgs.msg.Float64(3.1))\n        arm_5.send_message(std_msgs.msg.Float64(-0.99))\n        arm_6.send_message(std_msgs.msg.Float64(0.2))\n    pub = rospy.Publisher('/bebbel_state', Int32, queue_size=1)\n    pub.publish(sebbel_state.value)\n    pub2 = rospy.Subscriber('/cylinder_height', Float32, callback_height)\n","active":true,"decorators":["@nrp.MapVariable(\"go_to_init\", initial_value=0)","@nrp.MapVariable(\"cylinder_height\", initial_value=1.12015)","@nrp.MapVariable(\"sebbel_time\", initial_value=0)","@nrp.MapVariable(\"sebbel_state\", initial_value=0)","@nrp.MapVariable(\"last_action_time\", initial_value=0)","@nrp.MapSpikeSink(\"output_2\", nrp.brain.actors[2], nrp.population_rate)","@nrp.MapSpikeSink(\"output_1\", nrp.brain.actors[1], nrp.population_rate)","@nrp.MapSpikeSink(\"output_0\", nrp.brain.actors[0], nrp.population_rate)","@nrp.MapRobotPublisher(\"arm_6\", Topic(\"/robot/arm_6_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"arm_5\", Topic(\"/robot/arm_5_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"arm_4\", Topic(\"/robot/arm_4_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"arm_3\", Topic(\"/robot/arm_3_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"arm_2\", Topic(\"/robot/arm_2_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"arm_1\", Topic(\"/robot/arm_1_joint/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_thumb_distal\", Topic(\"/robot/hand_j3/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_thumb_flexion\", Topic(\"/robot/hand_j4/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_pinky_distal\", Topic(\"/robot/hand_j13/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_pinky_proximal\", Topic(\"/robot/hand_Pinky/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_ring_distal\", Topic(\"/robot/hand_j12/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_ring_proximal\", Topic(\"/robot/hand_Ring_Finger/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_middle_distal\", Topic(\"/robot/hand_Middle_Finger_Distal/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_middle_proximal\", Topic(\"/robot/hand_Middle_Finger_Proximal/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_index_distal\", Topic(\"/robot/hand_Index_Finger_Distal/cmd_pos\", std_msgs.msg.Float64))","@nrp.MapRobotPublisher(\"hand_index_proximal\", Topic(\"/robot/hand_Index_Finger_Proximal/cmd_pos\", std_msgs.msg.Float64))","@nrp.Neuron2Robot()"],"functionDef":"def simple_move_robot(t, output_1, output_0, output_2, hand_index_proximal, hand_index_distal, hand_middle_proximal, hand_middle_distal, hand_ring_proximal, hand_ring_distal, hand_pinky_proximal, hand_pinky_distal, hand_thumb_flexion, hand_thumb_distal, arm_1, arm_2, arm_3, arm_4, arm_5, arm_6, sebbel_time, sebbel_state, last_action_time, cylinder_height, go_to_init):","type":2,"devices":[{"neurons":{"name":"actors","stop":2,"ids":[],"start":1,"step":1,"type":1},"type":"PopulationRate","name":"output_1"},{"neurons":{"name":"actors","stop":1,"ids":[],"start":0,"step":1,"type":1},"type":"PopulationRate","name":"output_0"},{"neurons":{"name":"actors","stop":3,"ids":[],"start":2,"step":1,"type":1},"type":"PopulationRate","name":"output_2"}],"variables":[{"type":"int","name":"sebbel_time","initial_value":"0"},{"type":"int","name":"sebbel_state","initial_value":"0"},{"type":"int","name":"last_action_time","initial_value":"0"},{"type":"float","name":"cylinder_height","initial_value":"1.12015"},{"type":"int","name":"go_to_init","initial_value":"0"}],"topics":[{"topic":"/robot/hand_Index_Finger_Proximal/cmd_pos","type":"std_msgs/Float64","name":"hand_index_proximal","publishing":true,"isDefault":false},{"topic":"/robot/hand_Index_Finger_Distal/cmd_pos","type":"std_msgs/Float64","name":"hand_index_distal","publishing":true,"isDefault":false},{"topic":"/robot/hand_Middle_Finger_Proximal/cmd_pos","type":"std_msgs/Float64","name":"hand_middle_proximal","publishing":true,"isDefault":false},{"topic":"/robot/hand_Middle_Finger_Distal/cmd_pos","type":"std_msgs/Float64","name":"hand_middle_distal","publishing":true,"isDefault":false},{"topic":"/robot/hand_Ring_Finger/cmd_pos","type":"std_msgs/Float64","name":"hand_ring_proximal","publishing":true,"isDefault":false},{"topic":"/robot/hand_j12/cmd_pos","type":"std_msgs/Float64","name":"hand_ring_distal","publishing":true,"isDefault":false},{"topic":"/robot/hand_Pinky/cmd_pos","type":"std_msgs/Float64","name":"hand_pinky_proximal","publishing":true,"isDefault":false},{"topic":"/robot/hand_j13/cmd_pos","type":"std_msgs/Float64","name":"hand_pinky_distal","publishing":true,"isDefault":false},{"topic":"/robot/hand_j4/cmd_pos","type":"std_msgs/Float64","name":"hand_thumb_flexion","publishing":true,"isDefault":false},{"topic":"/robot/hand_j3/cmd_pos","type":"std_msgs/Float64","name":"hand_thumb_distal","publishing":true,"isDefault":false},{"topic":"/robot/arm_1_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_1","publishing":true,"isDefault":false},{"topic":"/robot/arm_2_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_2","publishing":true,"isDefault":false},{"topic":"/robot/arm_3_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_3","publishing":true,"isDefault":false},{"topic":"/robot/arm_4_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_4","publishing":true,"isDefault":false},{"topic":"/robot/arm_5_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_5","publishing":true,"isDefault":false},{"topic":"/robot/arm_6_joint/cmd_pos","type":"std_msgs/Float64","name":"arm_6","publishing":true,"isDefault":false}]},{"id":1,"name":"sensor2brain","code":"import rospy\nfrom std_msgs.msg import Int32\ninput_0.amplitude = 1.0\ninput_1.amplitude = 1.0\ninput_2.amplitude = 1.0","dirty":true,"local":false,"error":{"Loading":{"lineText":"","functionName":"sensor2brain","errorType":"Loading","offset":-1,"fileName":"","sourceType":"Transfer Function","lineNumber":-1,"message":"Parameter input_3 was not mapped properly","severity":1}},"oldName":"sensor2brain","rawCode":"@nrp.MapSpikeSource(\"input_2\", nrp.brain.sensors[2], nrp.dc_source)\n@nrp.MapSpikeSource(\"input_1\", nrp.brain.sensors[1], nrp.dc_source)\n@nrp.MapSpikeSource(\"input_0\", nrp.brain.sensors[0], nrp.dc_source)\n@nrp.Robot2Neuron()\ndef sensor2brain(t, input_2, input_1, input_0, input_3):\n    import rospy\n    from std_msgs.msg import Int32\n    def callback (data):\n        if(data.data == 3):\n            state_proxy = ServiceProxy('/gazebo/get_model_state',\n                                         GetModelState, persistent=True)\n            try:\n                current_cylinder_state = state_proxy(\"cylinder\", \"world\")\n                input_0.amplitude = current_cylinder_state.pose.position.x\n                input_1.amplitude = current_cylinder_state.pose.position.y\n                input_2.amplitude = current_cylinder_state.pose.position.z\n            except rospy.ServiceException as exc:\n                clientLogger.info(str(exc))\n    rospy.Subscriber('/bebbel_state', Int32, callback)\n","active":false,"decorators":["@nrp.MapSpikeSource(\"input_2\", nrp.brain.sensors[2], nrp.dc_source)","@nrp.MapSpikeSource(\"input_1\", nrp.brain.sensors[1], nrp.dc_source)","@nrp.MapSpikeSource(\"input_0\", nrp.brain.sensors[0], nrp.dc_source)","@nrp.Robot2Neuron()"],"functionDef":"def sensor2brain(t, input_2, input_1, input_0, input_3):","type":1,"devices":[{"neurons":{"name":"sensors","stop":3,"ids":[],"start":2,"step":1,"type":1},"type":"DCSource","name":"input_2"},{"neurons":{"name":"sensors","stop":2,"ids":[],"start":1,"step":1,"type":1},"type":"DCSource","name":"input_1"},{"neurons":{"name":"sensors","stop":1,"ids":[],"start":0,"step":1,"type":1},"type":"DCSource","name":"input_0"}],"variables":[],"topics":[],"editName":false,"decoratorDirty":true},{"id":2,"name":"grab_image","code":null,"dirty":false,"local":false,"error":{},"oldName":"grab_image","rawCode":"# Imported Python Transfer Function\nimport numpy as np\nimport sensor_msgs.msg\nfrom cv_bridge import CvBridge\nimport cv2\nfrom std_msgs.msg import Float32, String, Int32\nimport rospy\n@nrp.MapRobotPublisher(\"topic\", Topic(\"/visualizer\", sensor_msgs.msg.Image))\n@nrp.MapRobotPublisher(\"visualizer_hand\", Topic(\"/visualizer\", sensor_msgs.msg.Image))\n@nrp.MapRobotPublisher(\"visualizer\", Topic(\"/visualizer\", sensor_msgs.msg.Image))\n@nrp.MapRobotSubscriber(\"camera\", Topic(\"/camera/image_raw\", sensor_msgs.msg.Image))\n@nrp.Robot2Neuron()\ndef grab_image (t, camera, visualizer, visualizer_hand, topic):\n    from std_msgs.msg import Float32, String, Int32\n    import rospy\n    image_msg = camera.value\n    low_H = 0\n    low_S = 0\n    low_V = 90\n    high_H, high_S, high_V = 255, 255, 110\n    lower_blue = np.array([110,50,50])\n    upper_blue = np.array([130,255,255])\n    lower_orange = np.array([10, 50, 50])\n    upper_orange = np.array([20,255,255])\n    if image_msg is not None:\n        img = CvBridge().imgmsg_to_cv2(image_msg, \"rgb8\")\n        clientLogger.info(img.shape)\n        kernel_hand = np.ones((3,3),np.uint8)\n        kernel = np.ones((8,8),np.uint8)\n        frame_HSV = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n        hand_mask = cv2.inRange(frame_HSV, (low_H, low_S, low_V),\n                                (high_H, high_S, high_V))\n        orange_mask = cv2.inRange(frame_HSV, lower_orange, upper_orange)\n        orange_mask = cv2.bitwise_not(orange_mask)\n        blue_mask = cv2.inRange(frame_HSV, lower_blue, upper_blue)\n        blue_mask_inv = cv2.bitwise_not(blue_mask)\n        hand_mask = cv2.bitwise_and(cv2.bitwise_and(hand_mask,\n                                                    blue_mask_inv), orange_mask)\n        hand_mask = cv2.morphologyEx(hand_mask, cv2.MORPH_OPEN, kernel_hand)\n        mm = cv2.moments(blue_mask)\n        mm_hand = cv2.moments(hand_mask)\n        cX, cY = 0, 0\n        cX_hand, cY_hand = 0, 0\n        if (mm[\"m00\"] != 0):\n            cX = int(mm[\"m10\"] / mm[\"m00\"])\n            cY = int(mm[\"m01\"] / mm[\"m00\"])\n        if (mm_hand[\"m00\"] != 0):\n            cX_hand = int(mm_hand[\"m10\"] / mm_hand[\"m00\"])\n            cY_hand = int(mm_hand[\"m01\"] / mm_hand[\"m00\"])\n        # display the centroid\n        pub = rospy.Publisher('/cX_hand', Int32, queue_size=10)\n        pub.publish(cX_hand)\n        pub2 = rospy.Publisher('/cY_hand', Int32, queue_size=10)\n        pub2.publish(cY_hand)\n        pub3 = rospy.Publisher('/cX', Int32, queue_size=10)\n        pub3.publish(cX)\n        pub4 = rospy.Publisher('/cY', Int32, queue_size=10)\n        pub4.publish(cY)\n        clientLogger.info(\"cX_hand: \" + str(cX_hand) + \" cY_hand:\" + str(cY_hand))\n        clientLogger.info(\"cX: \" + str(cX) + \" cY:\" + str(cY))\n        vis_img = cv2.bitwise_or(np.array(blue_mask), np.array(hand_mask))\n        cv2.circle(vis_img, (cX, cY), 5, 255, -1)\n        cv2.circle(vis_img, (cX_hand, cY_hand), 5, 255, 5)\n        msg_frame = CvBridge().cv2_to_imgmsg(vis_img, 'mono8')\n        visualizer.send_message(msg_frame)\n        height, width, channels = img.shape\n        if(cX-30<0) :\n            dx1 = 0\n        else: \n            dx1 = cX-30\n        if(cX+20>width):\n            dx2 = width\n        else: \n            dx2 = cX+30\n        if(cY-30<0):\n            dy1= 0\n        else: \n            dy1 = cY-30\n        if(cY+20>height):\n            dy2=height\n        else: \n            dy2 = cY+30\n        small_image = vis_img[dy1:dy2, dx1:dx2]\n        smaller_image = cv2.resize(small_image,None,fx=0.5,fy=0.5)\n        clientLogger.info(\"shape of smaller image:\" + str(smaller_image.shape))    \n        distance = np.sqrt(np.power(cX - cX_hand, 2) + np.power(cY - cY_hand, 2))\n        clientLogger.info(\"distance between center of hand and object \" + str(distance))\n        return cX, cY\n","active":true,"decorators":["@nrp.MapRobotPublisher(\"topic\", Topic(\"/visualizer\", sensor_msgs.msg.Image))","@nrp.MapRobotPublisher(\"visualizer_hand\", Topic(\"/visualizer\", sensor_msgs.msg.Image))","@nrp.MapRobotPublisher(\"visualizer\", Topic(\"/visualizer\", sensor_msgs.msg.Image))","@nrp.MapRobotSubscriber(\"camera\", Topic(\"/camera/image_raw\", sensor_msgs.msg.Image))","@nrp.Robot2Neuron()"],"functionDef":"def grab_image (t, camera, visualizer, visualizer_hand, topic):"}],"SM":[{"id":"ObjectHandler","name":"ObjectHandler","code":"import hbp_nrp_excontrol.nrp_states as states\nfrom smach import StateMachine\nfrom smach.state import State\n\nfrom gazebo_msgs.srv import ApplyBodyWrench, GetModelState, DeleteModel, SpawnEntity, SpawnEntityRequest\nfrom geometry_msgs.msg import Wrench, Vector3, Point\nfrom std_msgs.msg import Float32, String\nimport rospy\nfrom rospy import ServiceProxy, wait_for_service\nfrom hbp_nrp_excontrol.logs import clientLogger\n\nFINISHED = 'FINISHED'\nERROR = 'ERROR'\nPREEMPTED = 'PREEMPTED'\n\nsm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])\n\nimport hbp_nrp_excontrol.nrp_states as states\n\ncylinder_name = \"cylinder\"\ncylinder_sdf_xml = \"\"\"\n<?xml version='1.0'?>\n<sdf version='1.5'>\n  <model name='{cylinder_name}'>\n    <pose frame=\"\">-0.37797 -0.25321 1.12015 0 0 0</pose>\n    <static>0</static>\n    <link name='{cylinder_name}'>\n      <pose frame=\"\">0 0 0 0 0 0</pose>\n      <inertial>\n        <mass>0.1</mass>\n        <inertia>\n          <ixx>0.000129</ixx>\n          <ixy>0</ixy>\n          <ixz>0</ixz>\n          <iyy>0.000129</iyy>\n          <iyz>0</iyz>\n          <izz>3.78e-05</izz>\n        </inertia>\n      </inertial>\n      <collision name=\"collision\">\n        <geometry>\n          <cylinder>\n            <radius>0.0275</radius>\n            <length>0.115</length>\n          </cylinder>\n        </geometry>\n        <max_contacts>10</max_contacts>\n        <surface>\n          <contact>\n            <ode/>\n          </contact>\n          <bounce/>\n          <friction>\n            <torsional>\n              <ode/>\n            </torsional>\n            <ode/>\n          </friction>\n        </surface>\n      </collision>\n      <visual name=\"visual\">\n        <geometry>\n          <cylinder>\n            <radius>0.0275</radius>\n            <length>0.115</length>\n          </cylinder>\n        </geometry>\n        <material>\n          <script>\n            <uri>file://media/materials/scripts/gazebo.material</uri>\n            <name>Gazebo/Blue</name>\n          </script>\n        </material>\n      </visual>\n      <self_collide>0</self_collide>\n      <kinematic>0</kinematic>\n      <gravity>1</gravity>\n    </link>\n  </model>\n</sdf>\n\"\"\"\n\nclass NewCylinderState(State):\n    def __init__(self, cylinder_name, sdf_xml, outcomes=['success', 'aborted']):\n        super(NewCylinderState, self).__init__(outcomes=outcomes)\n        self._cylinder_name = cylinder_name\n        self._spawn_proxy = rospy.ServiceProxy('/gazebo/spawn_sdf_entity',\n                                               SpawnEntity, persistent=True)\n        self._cylinder_msg = SpawnEntityRequest()\n        self._cylinder_msg.entity_name = self._cylinder_name\n        self._cylinder_msg.entity_xml = sdf_xml.format(cylinder_name=cylinder_name)\n        self._cylinder_msg.initial_pose.position.x = -0.37797\n        self._cylinder_msg.initial_pose.position.y = -0.25321\n        self._cylinder_msg.initial_pose.position.z = 1.12015\n        self._cylinder_msg.reference_frame = \"world\"\n        self.pub = rospy.Publisher('/state', String, queue_size=1)\n        self.pub.publish(\"init_pos\")\n\n    def execute(self, userdata):\n        self.pub.publish(\"init_pos\")\n        self._spawn_proxy(self._cylinder_msg)\n        return 'success'\n\nclass FlyingCylinderState(State):\n    def __init__(self, cylinder_name, rate=1, outcomes=['success', 'aborted'], max_hit_duration=15):\n        super(FlyingCylinderState, self).__init__(outcomes=outcomes)\n        self._rate = rospy.Rate(rate)\n        self._cylinder_name = cylinder_name\n        self._state_proxy = ServiceProxy('/gazebo/get_model_state',\n                                         GetModelState, persistent=True)\n        self._delete_proxy = ServiceProxy('/gazebo/delete_model',\n                                         DeleteModel, persistent=True)\n        self._distance_topic = rospy.Publisher('/cylinder_distance', Float32, queue_size=10)\n        self._height_topic = rospy.Publisher('/cylinder_height', Float32, queue_size=1)\n        self.max_hit_duration=15\n        \n\n\n    def execute(self, userdata):\n        start_time = rospy.Time.now()\n        \n        pub = rospy.Publisher('/state', String, queue_size=1)\n        pub.publish(\"thrown\")\n        while not self.cylinder_lower_than(0.2) and (rospy.Time.now() - start_time) < rospy.Duration(self.max_hit_duration):\n            cylinder_height = self.get_cylinder_height()\n            if(cylinder_height != -1000):\n                self._height_topic.publish(Float32(cylinder_height))\n            self._rate.sleep()\n        cylinder_pos = self.get_cylinder_distance()\n        clientLogger.advertise(\"Cylinder distance: {}\".format(cylinder_pos))\n        self._distance_topic.publish(Float32(cylinder_pos))\n        self._delete_proxy(self._cylinder_name)\n        return 'success'\n\n    def get_cylinder_distance(self):\n        try:\n            current_cylinder_state = self._state_proxy(cylinder_name, \"world\")\n        except rospy.ServiceException as exc:\n            clientLogger.error(str(exc))\n            return -1000.0\n        return -current_cylinder_state.pose.position.y\n\n    def cylinder_lower_than(self, z_threshold):\n        try:\n            current_cylinder_state = self._state_proxy(cylinder_name, \"world\")\n        except rospy.ServiceException as exc:\n            clientLogger.info(str(exc))\n            return False\n        return current_cylinder_state.pose.position.z < z_threshold\n    \n    def get_cylinder_height(self): \n        try:\n            current_cylinder_state = self._state_proxy(cylinder_name, \"world\")\n        except rospy.ServiceException as exc:\n            clientLogger.error(str(exc))\n            return -1000.0\n        return current_cylinder_state.pose.position.z\n\n\nwith sm:\n    StateMachine.add(\n      \"new_cylinder\",\n      NewCylinderState(cylinder_name, cylinder_sdf_xml),\n      transitions = {\"success\": \"flying_cylinder\",\n                     \"aborted\": ERROR}\n    )\n    StateMachine.add(\n     \"flying_cylinder\",\n     FlyingCylinderState(cylinder_name),\n     transitions = {\"success\": \"new_cylinder\",\n                    \"aborted\": ERROR}\n    )\n","dirty":true,"local":false,"error":{"Runtime":{"lineText":"","functionName":"ObjectHandler","errorType":"Runtime","offset":-1,"fileName":"/tmp/sm_obUpis.py","sourceType":"State Machine","lineNumber":-1,"message":"Could not execute state 'flying_cylinder' of type '<sm_ObjectHandler.FlyingCylinderState object at 0x7f6069401990>': Traceback (most recent call last):\n  File \"/opt/ros/kinetic/lib/python2.7/dist-packages/smach/state_machine.py\", line 247, in _update_once\n    self._remappings[self._current_label]))\n  File \"/tmp/sm_obUpis.py\", line 123, in execute\n    cylinder_height = get_cylinder_height()\nNameError: global name 'get_cylinder_height' is not defined\n","severity":1}}}]},"__owner_id":"default-owner"}